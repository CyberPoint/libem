/*********************************************************************************
# Copyright (c) 2012, CyberPoint International, LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the CyberPoint International, LLC nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CYBERPOINT INTERNATIONAL, LLC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**********************************************************************************/


/*! \file EM_Algorithm.h
*   \brief Function prototypes for EM algorithm routines
*/
#ifndef EM_AGORITHM_H
#define EM_ALGORITHM_H

/* EXPECTATION MAXIMIZATION ALGORITHM
   Written by Elizabeth Garbee, Summer 2012 */

#include <limits>
#include "Matrix.h"

using namespace std;

/************************************************************************************************
** EM FUNCTION "PUBLIC" DECLARATIONS
************************************************************************************************/



/*! \brief EM is the function in which the whole EM algorithm comes together.
*
* First, you set up the initial conditions (noting that now, instead of the arguments estep and mstep pass to each other,
* we're now passing in the structures your caller initialized). You then call kmeans to get initial cluster centroid (mu) guesses,
* and then iterate between the estep and mstep until convergence.
* EM doesn't actually return anything - instead, you're filling the containers you created when you called the function, and
* when EM has "finished," you can use/print out your final approximations in the caller.
*
@param n number of data points
@param m dimensionality of data
@param k number of clusters
@param X data
@param sigma_matrix vector of matrix pointers generated by the caller of EM that holds the sigmas calculated
@param mu_matrix matrix that holds the mu approximations
@param Pks local copy of the matrix generated by the caller of EM that holds the Pk's calculated
@return the log likelihood (density) of the data (or std::numeric_limits::infinity() on error)
*/
double EM(int n, int m, int k, double *X, vector<Matrix*> &sigma_matrix, Matrix &mu_matrix, Matrix &Pks);

/*! \brief ParseCSV is a function that takes in your comma delineated data and parses it according to parameters given at the command line.
*
*	This is how you first define the three crucial parameters for the Kmeans and EM approximations:
*		m - integer representing the dimensionality of the data
*		n - number of data points
*		k - how many clusters you want Kmeans to find
*	This returns 1 for success, 0 for an error or failure.
*/
int ParseCSV(char *file_name, double *data, int n, int m);


#endif //EM_ALGORITHM_HEADER

